/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sarath.xmloperation;


import com.sarath.xmloperation.JsonPack.JsonPojo;
import com.sarath.xmloperation.JsonPack.Results;
import javax.swing.JFileChooser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import sun.net.www.http.HttpClient;
/**
 *
 * @author sarath
 */
public class Main extends javax.swing.JFrame {

    JFileChooser fc;
    String fileToConvert=null;
    int cellindex;
    String xcode,xlanname,log,lati;
    String xprimary;
    ArrayList<Locations> locations,finaldata;
    /**
     * Creates new form Main
     */
    
   
    
    public Main() {
        initComponents();
        fc = new JFileChooser();
        //filechooser.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        upload = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        btnConvert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        upload.setText("Select excel file");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        labelStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStatus.setText("status");

        btnConvert.setText("Get Location");
        btnConvert.setActionCommand("getlatlong");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(upload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConvert)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upload)
                    .addComponent(btnConvert))
                .addGap(18, 18, 18)
                .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed

        
      int returnVal = fc.showOpenDialog(Main.this);

      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        //This is where a real application would open the file.
        labelStatus.setText("selected: " + file.getName() + "." );
        labelStatus.setText("selected: " + file.getAbsolutePath() + "." );
        fileToConvert=file.getAbsolutePath();
       
      } else {
        labelStatus.setText("Open command cancelled by user." );
      }
      

      //Handle save button action.
    
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_uploadActionPerformed

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed

        if(fileToConvert==null)
        {
            labelStatus.setText("file not selected");
        }
        else
        {
            labelStatus.setText("Processing ");
            Convert();
            getlocation();
            writeLocatioListToFile();
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_btnConvertActionPerformed
   int insetstatus=0;
    public void Convert()
    {
        
        locations = new ArrayList<>();
        try
        {
            FileInputStream file = new FileInputStream(new File(fileToConvert));
 
            //Create Workbook instance holding reference to .xlsx file
             org.apache.poi.ss.usermodel.Workbook workbook = WorkbookFactory.create(file);
 
            //Get first/desired sheet from the workbook
            org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(0);
 
            //Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext())
            {
                Row row = rowIterator.next();
                //For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                 
                while (cellIterator.hasNext())
                {
                    Cell cell = cellIterator.next();
                    //Check the cell type and format accordingly
                    cellindex=cell.getColumnIndex();
                     System.out.print(  cell.getColumnIndex());
                     
                     if(cellindex==0)
                     {
                        xcode= String.format("%s",cell.getNumericCellValue()).replaceAll("\\.?0*$", "");
                        if(xcode=="" || xcode.isEmpty())
                        {
                            insetstatus=1;
                        }
                     }
                     else if(cellindex==1)
                     {
                         xlanname = cell.getStringCellValue();
                         if(xlanname=="" || xlanname.isEmpty())
                        {
                            insetstatus=1;
                        }
                     }
                     
                    
                     
                    
                }
                
                 if(insetstatus==0)
                     {
                     Locations data = new Locations();
                     data.setId(xcode);
                     data.setLocation(xlanname);
                     locations.add(data);
                     }
                     insetstatus=0;
                     System.out.print( xcode+ "  " +xlanname  );
                
                
                //xprimary = xcode
              //  System.out.print( xcode+ "  " +xlanname + "  " + xlancode + " " + xmsg );
                System.out.println("");
            }
            file.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
           JOptionPane.showMessageDialog(this,"Excel data getting error ","File error",JOptionPane.WARNING_MESSAGE); 
        }
         labelStatus.setText("Finished ");
        System.out.println("Finished");
    }
    
    
    public void getlocation() 
    {
        try{ 
        finaldata = new ArrayList<>();
       for(Locations data :locations) 
       {
     JsonPojo res = new LatLong().convertToLatLong(data.getLocation());
     if(res.getStatus().equals("OK"))
     {
      for(Results result : res.getResults())
      {
       System.out.println("Lattitude of address is :"  +result.getGeometry().getLocation().getLat());
       System.out.println("Longitude of address is :" + result.getGeometry().getLocation().getLng());
       System.out.println("Location is " + result.getGeometry().getLocation_type());
       data.setLatitude(result.getGeometry().getLocation().getLat());
       data.setLogitude(result.getGeometry().getLocation().getLng());
      }
     }
  else
  {
      data.setLatitude("0");
      data.setLatitude("0");
   System.out.println(res.getStatus());
  }
     
     finaldata.add(data);
       }
     
        }catch (Exception e)
        {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this,"Location getting error","Network",JOptionPane.WARNING_MESSAGE);
        }
        
    }
  
    
    
    public  void writeLocatioListToFile(){
         
        Workbook workbook = new XSSFWorkbook();
       try{
         
        Sheet sheet = workbook.createSheet("Locations");
         
        Iterator<Locations> iterator = finaldata.iterator();
         
        int rowIndex = 0;
        while(iterator.hasNext()){
            Locations loc = iterator.next();
            Row row = sheet.createRow(rowIndex++);
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(loc.getId());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(loc.getLocation());
             Cell cell2 = row.createCell(2);
            cell2.setCellValue(loc.getLatitude());
             Cell cell3 = row.createCell(3);
            cell3.setCellValue(loc.getLogitude());
        }
         
        //lets write the excel data to file now
        FileOutputStream fos = new FileOutputStream("output.xlsx");
        workbook.write(fos);
        fos.close();
        System.out.println("output.xlsx written successfully");
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(this,"File Writing error ","File error",JOptionPane.WARNING_MESSAGE); 
           e.printStackTrace();
       }
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
}
